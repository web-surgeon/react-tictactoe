{"version":3,"sources":["_helpers.js","Square.js","Board.js","Game.js","index.js"],"names":["getLatestMoveClass","shouldUse","Square","classes","this","props","selectedMove","value","push","winningSquare","join","className","getButtonClasses","onClick","React","Component","Board","i","winningLine","includes","squares","move","isWinningSquare","key","Fragment","Array","map","y","j","x","renderSquare","Game","totalRowsCols","totalSquares","initialState","history","fill","stepNumber","xIsNext","state","setState","slice","length","marker","getMarker","posX","posY","Math","floor","audio","Audio","calculateWinner","play","concat","step","desc","jumpTo","lines","a","b","c","number","pop","current","getGameHistory","winner","getWinningMarker","status","getBoardStatus","moves","getMoveList","resetGame","dangerouslySetInnerHTML","__html","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ba8bb84.chunk.js","sourcesContent":["export function getLatestMoveClass(shouldUse) {\n  return shouldUse ? \"latest-move\" : \"\";\n}\n","import React from \"react\";\nimport { getLatestMoveClass } from \"./_helpers\";\n\nexport default class Square extends React.Component {\n  getButtonClasses() {\n    let classes = [\"square\", getLatestMoveClass(this.props.selectedMove)];\n\n    if (!this.props.value) {\n      classes.push(\"available\");\n    }\n\n    if (this.props.winningSquare) {\n      classes.push(\"winning-square\");\n    }\n\n    return classes.join(\" \");\n  }\n\n  render() {\n    return (\n      <button className={this.getButtonClasses()} onClick={this.props.onClick}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n","import React from \"react\";\nimport Square from \"./Square\";\n\nexport default class Board extends React.Component {\n  isWinningSquare(i) {\n    return this.props.winningLine && this.props.winningLine.includes(i);\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        selectedMove={this.props.move === i}\n        winningSquare={this.isWinningSquare(i)}\n        key={i}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {[...Array(3)].map((i, y) => (\n          <div className=\"board-row\" key={y}>\n            {[...Array(3)].map((j, x) =>\n              this.renderSquare((y + 1) * 3 - (3 - x))\n            )}\n          </div>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport Board from \"./Board\";\nimport { getLatestMoveClass } from \"./_helpers\";\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.totalRowsCols = 3;\n    this.totalSquares = this.totalRowsCols * this.totalRowsCols;\n    this.initialState = {\n      history: [\n        {\n          squares: Array(this.totalSquares).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      winningLine: false\n    };\n\n    this.state = this.initialState;\n  }\n\n  resetGame() {\n    this.setState(this.initialState);\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const marker = this.getMarker();\n    const posX = (i % this.totalRowsCols) + 1;\n    const posY = Math.floor(i / this.totalRowsCols) + 1;\n    let audio = new Audio(\"./winner.mp3\");\n\n    if (squares[i]) {\n      return;\n    }\n\n    if (this.state.winningLine) {\n      return false;\n    }\n\n    squares[i] = marker;\n\n    if (this.calculateWinner(squares)) {\n      this.setState({ winningLine: this.calculateWinner(squares) });\n\n      audio.play();\n    }\n\n    this.setState({\n      history: history.concat([{ squares, posX, posY, marker, i }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  getMarker() {\n    return this.state.xIsNext ? \"X\" : \"0\";\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  getMoveList() {\n    return this.state.history.map((step, move) => {\n      const alphaMoves = [\"\", \"A\", \"B\", \"C\"];\n\n      if (!step.marker) {\n        return false;\n      }\n\n      const desc = `#${move}  (${step.marker} - ${step.posY}${\n        alphaMoves[step.posX]\n      })`;\n\n      return (\n        <button\n          key={move}\n          className={getLatestMoveClass(this.state.stepNumber === move)}\n          onClick={() => this.jumpTo(move)}\n        >\n          <span>Go to move</span> {desc}\n        </button>\n      );\n    });\n  }\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return lines[i];\n      }\n    }\n\n    return null;\n  }\n\n  getGameHistory(number = false) {\n    const history = this.state.history;\n\n    if (number) {\n      return history[number];\n    } else {\n      return history.slice(-1).pop();\n    }\n  }\n\n  getWinningMarker(squares) {\n    const winningLine = this.calculateWinner(squares);\n    const current = this.getGameHistory();\n\n    if (!winningLine) {\n      return false;\n    }\n\n    return current.marker;\n  }\n\n  getBoardStatus(winner) {\n    if (winner) {\n      return \"And the winner is <em>\" + winner + \"</em>.\";\n    } else if (this.state.history.length > this.totalSquares) {\n      return \"The game has finished in a <em>tie</em>.\";\n    } else {\n      return \"The next move belongs to <em>\" + this.getMarker() + \"</em>.\";\n    }\n  }\n\n  render() {\n    const current = this.getGameHistory(this.state.stepNumber);\n    const winner = this.getWinningMarker(current.squares);\n    const status = this.getBoardStatus(winner);\n    const moves = this.getMoveList();\n\n    return (\n      <div className=\"game-container\">\n        <div className=\"game-status\">\n          <button className=\"game-reset\" onClick={() => this.resetGame()}>\n            Reset\n          </button>\n\n          <span dangerouslySetInnerHTML={{ __html: status }} />\n        </div>\n\n        <div className={\"game \" + (!winner ? \"active\" : \"done\")}>\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              move={current.i}\n              onClick={i => this.handleClick(i)}\n              winningLine={this.state.winningLine}\n            />\n          </div>\n          <div className=\"game-info\">\n            <h5>Game History</h5>\n            <div>{moves}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\nimport \"./styles.scss\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}